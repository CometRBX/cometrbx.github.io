{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Notice Solar is currently still in beta and is not suitable for use in production games. There are still many bugs within Solar which need to be fixed before it is ready for production games. About Solar Solar is an admin system designed primarily for developers. It allows developers to easily customize almost all aspects of it. Developers are encouraged to program their own commands to add to Solar. Join our Discord If you have Discord, we'd love for you to join our Discord server and talk to other Solar users. You can also receive support there if you need it! Features Solar has quite a few features, our main ones are: Command & Argument Suggestions Tab Autocompletion Themes Plugins Easy to use API Fast Setup Custom Commands Screenshots & Videos Credits Developers: Starnamics Exp_Bread S1mp1eDude Contributors: Exp_Bread S1mp1eDude If you'd like to contribute to Solar, you can join our Discord server and post your custom themes, commands, plugins or anything else for Solar!","title":"Introduction"},{"location":"#introduction","text":"Notice Solar is currently still in beta and is not suitable for use in production games. There are still many bugs within Solar which need to be fixed before it is ready for production games.","title":"Introduction"},{"location":"#about-solar","text":"Solar is an admin system designed primarily for developers. It allows developers to easily customize almost all aspects of it. Developers are encouraged to program their own commands to add to Solar.","title":"About Solar"},{"location":"#join-our-discord","text":"If you have Discord, we'd love for you to join our Discord server and talk to other Solar users. You can also receive support there if you need it!","title":"Join our Discord"},{"location":"#features","text":"Solar has quite a few features, our main ones are: Command & Argument Suggestions Tab Autocompletion Themes Plugins Easy to use API Fast Setup Custom Commands","title":"Features"},{"location":"#screenshots-videos","text":"","title":"Screenshots &amp; Videos"},{"location":"#credits","text":"Developers: Starnamics Exp_Bread S1mp1eDude Contributors: Exp_Bread S1mp1eDude If you'd like to contribute to Solar, you can join our Discord server and post your custom themes, commands, plugins or anything else for Solar!","title":"Credits"},{"location":"adding-commands/","text":"Adding Commands Since Solar does not come with any commands by default, you'll need to make your own or add some community made commands to Solar. Doing this is pretty easy, just follow the steps below and you should be good to go! Finding Commands If you'd rather not make your own commands, you can find some in our Discord server or on our Community Commands page Inserting Commands Inserting commands is quite simple, all you need to do is drag the Roblox model into the viewport and then move it into the Commands folder After you've done that, you can configure the commands if you'd like to! Creating Commands You can view our tutorial on creating commands here","title":"Adding Commands"},{"location":"adding-commands/#adding-commands","text":"Since Solar does not come with any commands by default, you'll need to make your own or add some community made commands to Solar. Doing this is pretty easy, just follow the steps below and you should be good to go!","title":"Adding Commands"},{"location":"adding-commands/#finding-commands","text":"If you'd rather not make your own commands, you can find some in our Discord server or on our Community Commands page","title":"Finding Commands"},{"location":"adding-commands/#inserting-commands","text":"Inserting commands is quite simple, all you need to do is drag the Roblox model into the viewport and then move it into the Commands folder After you've done that, you can configure the commands if you'd like to!","title":"Inserting Commands"},{"location":"adding-commands/#creating-commands","text":"You can view our tutorial on creating commands here","title":"Creating Commands"},{"location":"creating-commands/","text":"Creating Commands This tutorial will explain how you can start creating your own commands for Solar It is fairly easy to do if you have knowledge of programming on Roblox (it is recommended you have a bit of experience with Roblox programming before continuing) You should have Solar setup before starting this as it'll make it a lot easier Getting Started We'll start by creating a new module script in the Commands folder (you can also use the example.command module script!) The module script must end in .command or it will not register. You can set the name of your module script to anything you'd like (although it's good to have it named the same as your command name) 1 Once you've created your module script, copy & paste the code below into it local API = require ( game : GetService ( \"ReplicatedStorage\" ): WaitForChild ( \"Solar\" ): WaitForChild ( \"API\" )) local Command = API . CreateCommand () : SetName ( \"example\" ) --// Name of your command : SetDescription ( \"This is an example command\" ) --// Description of your command : SetPermissionLevel ( 4 ) --// Permission level of your command : AddArgument ( \"arg1\" , \"string\" , true ) --// Command Argument (name,type,required) : AddArgument ( \"arg2\" , \"player\" , false ) --// Command Argument 2 (name,type,required) : SetOptions ({ --// Command Options ParseArguments = true , --// Should arguments be parsed to their correct types or should they be sent as strings HideExecutionOnClient = false , --// Should command execution be hidden on the client? YieldOnClient = false , --// Should the client wait for this command to execute before closing }) : SetMetadata ({ --// Command Metadata LastCompatibleVersion = \"0.3.1\" , --// Which version of Solar is this command compatible with ForceCompatibility = false , --// Should the module display an error when this command is outdated }) Command : SetExecuteFunction ( function ( Player : API . RegisteredPlayer , arg1 : string , arg2 : {[ number ]: API . RegisteredPlayer }) --// Function to run when this command is executed print ( \"Command executed, arguments: \" , Player , arg1 , arg2 ) return API : CreateReturnObject ( true , \"Hello from this command!\" ) end ) Command : SetHook ( \"onRegister\" , function ( Command ) --// Function which runs when this hook has been fired (hook name, callback) print ( \"example has been registered!\" ) end ) return Command You can configure the command using the command functions which are pretty self explanatory Execute Function All commands must have an execution function or else they can not be executed. To add an execute function, type Command:SetExecuteFunction(function() end) Below is an example execute function: Command : SetExecuteFunction ( function ( Player : API . RegisteredPlayer , arg1 : string , arg2 : {[ number ]: API . RegisteredPlayer }) --// Function to run when this command is executed print ( \"Command executed, arguments: \" , Player , arg1 , arg2 ) return API : CreateReturnObject ( true , \"Hello from this command!\" ) end ) The 1st argument of the Command:SetExecuteFunction() function is the callback, this is the function which is called when the command is executed. When called, the 1st argument given will be a RegisteredPlayer , which is the user who executed the command. Following that, the rest of the arguments will be the arguments entered by the player who executed the command. You can do what you wish with the arguments. In the example command, it will print the command arguments to the console and then return a ReturnObject Your command must return a return object if the CommandObject.HideExecutionOnClient is set to false . If you do have the CommandObject.HideExecutionOnClient value set to true then you still need to return something but it will not be displayed to the client. The return object is used to display an output message to the player who executed the command. You can create a return object by calling API:CreateReturnObject() . The arguments for this should be a table containing a success value and an output message Example: return API : CreateReturnObject ( true , \"Hello from this command!\" , \"you can also do multiple output messages by adding another argument\" ) Once you've done that, you can test your command! Join your game, open the command bar and type in your command! Command Metadata Command Metadata is useful for plugins & the API, you can add data which helps plugins and you can change the version of Solar which your command works on You can add metadata by calling the CommandObject:SetMetadata({}) function and change the values, example: Command : SetMetadata ({ LastCompatibleVersion = \"0.3.1\" , ForceCompatibility = false , }) You can access can view a commands metadata by typing Command.Metadata Command Hooks Command Hooks are useful for executing code when the command is registered, before it is executed and after it is executed, below is a list of all hooks: onRegister beforeExecute afterExecute You can register hooks by using the CommandObject:SetHook() function Below is some example code for the onRegister hook Command : SetHook ( \"onRegister\" , function ( Command ) --// Function which runs when this hook has been fired (hook name, callback) print ( \"example has been registered!\" ) end ) It will print \"example has been registed!\" when the command is registered by the API. The CommandObject:SetHook() function accepts two arguments, HookName and Callback The HookName argument can be set to one of the three hooks or you can add your own The Callback argument needs to be set to a function which is called when the hook is fired The name of the module script does not change the name of your command, you can change the name of the command within the module script \u21a9","title":"Creating Commands"},{"location":"creating-commands/#creating-commands","text":"This tutorial will explain how you can start creating your own commands for Solar It is fairly easy to do if you have knowledge of programming on Roblox (it is recommended you have a bit of experience with Roblox programming before continuing) You should have Solar setup before starting this as it'll make it a lot easier","title":"Creating Commands"},{"location":"creating-commands/#getting-started","text":"We'll start by creating a new module script in the Commands folder (you can also use the example.command module script!) The module script must end in .command or it will not register. You can set the name of your module script to anything you'd like (although it's good to have it named the same as your command name) 1 Once you've created your module script, copy & paste the code below into it local API = require ( game : GetService ( \"ReplicatedStorage\" ): WaitForChild ( \"Solar\" ): WaitForChild ( \"API\" )) local Command = API . CreateCommand () : SetName ( \"example\" ) --// Name of your command : SetDescription ( \"This is an example command\" ) --// Description of your command : SetPermissionLevel ( 4 ) --// Permission level of your command : AddArgument ( \"arg1\" , \"string\" , true ) --// Command Argument (name,type,required) : AddArgument ( \"arg2\" , \"player\" , false ) --// Command Argument 2 (name,type,required) : SetOptions ({ --// Command Options ParseArguments = true , --// Should arguments be parsed to their correct types or should they be sent as strings HideExecutionOnClient = false , --// Should command execution be hidden on the client? YieldOnClient = false , --// Should the client wait for this command to execute before closing }) : SetMetadata ({ --// Command Metadata LastCompatibleVersion = \"0.3.1\" , --// Which version of Solar is this command compatible with ForceCompatibility = false , --// Should the module display an error when this command is outdated }) Command : SetExecuteFunction ( function ( Player : API . RegisteredPlayer , arg1 : string , arg2 : {[ number ]: API . RegisteredPlayer }) --// Function to run when this command is executed print ( \"Command executed, arguments: \" , Player , arg1 , arg2 ) return API : CreateReturnObject ( true , \"Hello from this command!\" ) end ) Command : SetHook ( \"onRegister\" , function ( Command ) --// Function which runs when this hook has been fired (hook name, callback) print ( \"example has been registered!\" ) end ) return Command You can configure the command using the command functions which are pretty self explanatory","title":"Getting Started"},{"location":"creating-commands/#execute-function","text":"All commands must have an execution function or else they can not be executed. To add an execute function, type Command:SetExecuteFunction(function() end) Below is an example execute function: Command : SetExecuteFunction ( function ( Player : API . RegisteredPlayer , arg1 : string , arg2 : {[ number ]: API . RegisteredPlayer }) --// Function to run when this command is executed print ( \"Command executed, arguments: \" , Player , arg1 , arg2 ) return API : CreateReturnObject ( true , \"Hello from this command!\" ) end ) The 1st argument of the Command:SetExecuteFunction() function is the callback, this is the function which is called when the command is executed. When called, the 1st argument given will be a RegisteredPlayer , which is the user who executed the command. Following that, the rest of the arguments will be the arguments entered by the player who executed the command. You can do what you wish with the arguments. In the example command, it will print the command arguments to the console and then return a ReturnObject Your command must return a return object if the CommandObject.HideExecutionOnClient is set to false . If you do have the CommandObject.HideExecutionOnClient value set to true then you still need to return something but it will not be displayed to the client. The return object is used to display an output message to the player who executed the command. You can create a return object by calling API:CreateReturnObject() . The arguments for this should be a table containing a success value and an output message Example: return API : CreateReturnObject ( true , \"Hello from this command!\" , \"you can also do multiple output messages by adding another argument\" ) Once you've done that, you can test your command! Join your game, open the command bar and type in your command!","title":"Execute Function"},{"location":"creating-commands/#command-metadata","text":"Command Metadata is useful for plugins & the API, you can add data which helps plugins and you can change the version of Solar which your command works on You can add metadata by calling the CommandObject:SetMetadata({}) function and change the values, example: Command : SetMetadata ({ LastCompatibleVersion = \"0.3.1\" , ForceCompatibility = false , }) You can access can view a commands metadata by typing Command.Metadata","title":"Command Metadata"},{"location":"creating-commands/#command-hooks","text":"Command Hooks are useful for executing code when the command is registered, before it is executed and after it is executed, below is a list of all hooks: onRegister beforeExecute afterExecute You can register hooks by using the CommandObject:SetHook() function Below is some example code for the onRegister hook Command : SetHook ( \"onRegister\" , function ( Command ) --// Function which runs when this hook has been fired (hook name, callback) print ( \"example has been registered!\" ) end ) It will print \"example has been registed!\" when the command is registered by the API. The CommandObject:SetHook() function accepts two arguments, HookName and Callback The HookName argument can be set to one of the three hooks or you can add your own The Callback argument needs to be set to a function which is called when the hook is fired The name of the module script does not change the name of your command, you can change the name of the command within the module script \u21a9","title":"Command Hooks"},{"location":"installing-solar/","text":"Installing Solar There are two ways you can install Solar, Using Github Using Roblox Notice The current release of Solar is still in beta and is a pre-release , meaning it is not suitable for production games & will contain bugs Github To install Solar using Github, download the latest RBXM file from our releases page and then follow the steps below. Open your game in Roblox Studio Insert the model into ReplicatedStorage You're all set! Move onto the \"Setting Up Solar\" page to learn how to set Solar up Roblox To install Solar using Roblox, get the Roblox model from the model page and then follow the steps below. Open your game in Roblox Studio Open Toolbox and drag the model into the viewport Drag the model into ReplicatedStorage You're all set! Move onto the \"Setting Up Solar\" page to learn how to set Solar up","title":"Installing Solar"},{"location":"installing-solar/#installing-solar","text":"There are two ways you can install Solar, Using Github Using Roblox Notice The current release of Solar is still in beta and is a pre-release , meaning it is not suitable for production games & will contain bugs","title":"Installing Solar"},{"location":"installing-solar/#github","text":"To install Solar using Github, download the latest RBXM file from our releases page and then follow the steps below. Open your game in Roblox Studio Insert the model into ReplicatedStorage You're all set! Move onto the \"Setting Up Solar\" page to learn how to set Solar up","title":"Github"},{"location":"installing-solar/#roblox","text":"To install Solar using Roblox, get the Roblox model from the model page and then follow the steps below. Open your game in Roblox Studio Open Toolbox and drag the model into the viewport Drag the model into ReplicatedStorage You're all set! Move onto the \"Setting Up Solar\" page to learn how to set Solar up","title":"Roblox"},{"location":"setup-solar/","text":"Setting Up Solar Setting up Solar is fairly easy, follow the steps below to set it up and start using Solar! Initialization Before Solar can work, you must initialize it using our API, this can be done by inserting a script into ServerScriptService with the code below: local Solar = game : GetService ( \"ReplicatedStorage\" ): WaitForChild ( \"Solar\" ) local API = require ( Solar : WaitForChild ( \"API\" )) --// Require Solar API --// Initialize Solar & register commands API : Initialize () Once you have done this, Solar should be up & running! Settings Now it's time to configure Solar's settings. md-typeset Open the Settings module located in the Solar folder Once you've opened it, you can configure Solar. Command Bar Hotkeys The 1st value ( Settings.CommandBarHotkeys ) is used to configure the keys used to open the command bar. The default key is ' To change the hotkey, replace the value with a KeyCode You can add multiple hotkeys, just add another value to the table, separated by a comma. Limit Command Bar Access You can limit the command bar to users who have a permission level above 2 Change the Settings.IsCommandBarRestricted value to true or false to toggle it on/off Register Command Descendants This is used to choose if you'd like to register the descendants of the commands folder (it is recommended you keep this on to make using command packs easier) Change the Settings.RegisterCommandDescendants value to true to enable it or false to disable it Log API Errors & Info This setting will make the API log errors and information about commands, command execution and more. To log API errors, set the Settings.LogAPIErrors value to true (or false to disable it) To log API information, set the Settings.LogAPIInfo value to true (or false to disable it) Data Saving Solar will save data such as Player Permission Level (if it was changed in-game), Game History (history that commands can log to (for bans, kicks, etc)) and Execution Log. You can configure which ones of these should be saved as well as the Data Store Key DataStoreKey = \"DefaultDataStoreKey\" , --// You should replace this to something random! SavedData = { --// Data which is saved when player leaves game PermissionLevel = true , --// Should a players permission level be saved? GameHistory = true , --// Should a players history be saved? (recommended) ExecutionLog = false , --// Should a players command execution history be saved? }, Permissions Configuring Permissions for Solar is one of the most important parts of the configuration. In Solar, there are 3 ways you can give a user permissions, UserId & Username Group/Group Rank Asset/Gamepass Solar also has 4 1 permission levels: Permission Level Name Level 1 Player Level 2 Moderator Level 3 Administrator Level 4 Head Administrator When setting a users permission level, you only need to use the number Player Permissions To give a specific player permissions, paste the code below into the Players table in the Settings.Permissions table [ 00000000 ] = { --// The UserId or Username of the player (UserId is recommended) Level = 4 , --// The permission level of the player }, The Index of this table ( 00000000 ) is the players UserId or Username. You should replace it with your own. The Level value is the permission level, you can set it to any value between 1-4 depending on how much permission you'd like to give the player (scroll up to see each permission level) You can duplicate the code and edit it to add more players. Group Permissions Group Permissions are a bit more advanced than player permissions. Paste the code below into the Groups table in the Permissions table [ 00000000 ] = { --// The Group Id Level = 1 , --// The permission level for the entire group Ranks = { --// The levels for each group rank [ 255 ] = { --// The ID of the group rank Level = 3 , --// The permission level for the role Operator = \"==\" , --// The relational operator for this role (read the docs for more information) }, }, }, The Index of this table ( 00000000 ) is the ID of the group. Inside the table, you can set a permission level for the whole group by changing the Level value to the permission level you'd like You can also give certain ranks a permission level so all players who have that rank will get the permission level To do this, edit or duplicate the 1st table in the Ranks table [ 255 ] = { --// The ID of the group rank Level = 3 , --// The permission level for the role Operator = \"==\" , --// The relational operator for this role (read the docs for more information) }, Set the Index of the table to the rank number of your role Next, set the Level value to the permission level you'd like the role to receive And after that, you can change the Operator value to one of the values below depending on how you'd like it to work Operator Action == Gives members of this role the permission level >= Gives members of this role and members above this role the permisson level <= Gives members of this role and members below this role the permission level ~= Gives anyone who is not a member of this role the permission level > Gives members above this role the permission level < Gives members below this role the permission level You can repeat this process for the ranks you'd like to give permission levels to! Asset Permissions Asset permissions are useful if you have gamepasses to give permission levels. Paste the code below into the Assets table in the Permissions table [ 00000000 ] = { --// The asset's ID Level = 3 , --// The permission level for the players who own the asset Type = \"gamepass\" , --// The value type (if you entered a gamepass's ID, type 'gamepass', otherwise type 'asset') }, Set the Index ( 00000000 ) of the table to your gamepass or asset ID Next, you can set the permission level you'd like owners of this asset to receive by changing the Level value Finally, you should change the type to either gamepass or asset depending on the type of asset you entered (all assets other than gamepasses = asset ) Changing Folder Locations If you'd like to move where the Commands , Plugins and Themes folders are located, you need to update it within the settings Change the CommandsFolder value to the folder of your commands if you moved the folder Change the PluginsFolder value to the folder of your plugins if you moved the folder Change the ThemesFolder value to the folder of your themes if you moved the folder Additional permission levels can be added if needed \u21a9","title":"Setting Up Solar"},{"location":"setup-solar/#setting-up-solar","text":"Setting up Solar is fairly easy, follow the steps below to set it up and start using Solar!","title":"Setting Up Solar"},{"location":"setup-solar/#initialization","text":"Before Solar can work, you must initialize it using our API, this can be done by inserting a script into ServerScriptService with the code below: local Solar = game : GetService ( \"ReplicatedStorage\" ): WaitForChild ( \"Solar\" ) local API = require ( Solar : WaitForChild ( \"API\" )) --// Require Solar API --// Initialize Solar & register commands API : Initialize () Once you have done this, Solar should be up & running!","title":"Initialization"},{"location":"setup-solar/#settings","text":"Now it's time to configure Solar's settings. md-typeset Open the Settings module located in the Solar folder Once you've opened it, you can configure Solar.","title":"Settings"},{"location":"setup-solar/#command-bar-hotkeys","text":"The 1st value ( Settings.CommandBarHotkeys ) is used to configure the keys used to open the command bar. The default key is ' To change the hotkey, replace the value with a KeyCode You can add multiple hotkeys, just add another value to the table, separated by a comma.","title":"Command Bar Hotkeys"},{"location":"setup-solar/#limit-command-bar-access","text":"You can limit the command bar to users who have a permission level above 2 Change the Settings.IsCommandBarRestricted value to true or false to toggle it on/off","title":"Limit Command Bar Access"},{"location":"setup-solar/#register-command-descendants","text":"This is used to choose if you'd like to register the descendants of the commands folder (it is recommended you keep this on to make using command packs easier) Change the Settings.RegisterCommandDescendants value to true to enable it or false to disable it","title":"Register Command Descendants"},{"location":"setup-solar/#log-api-errors-info","text":"This setting will make the API log errors and information about commands, command execution and more. To log API errors, set the Settings.LogAPIErrors value to true (or false to disable it) To log API information, set the Settings.LogAPIInfo value to true (or false to disable it)","title":"Log API Errors &amp; Info"},{"location":"setup-solar/#data-saving","text":"Solar will save data such as Player Permission Level (if it was changed in-game), Game History (history that commands can log to (for bans, kicks, etc)) and Execution Log. You can configure which ones of these should be saved as well as the Data Store Key DataStoreKey = \"DefaultDataStoreKey\" , --// You should replace this to something random! SavedData = { --// Data which is saved when player leaves game PermissionLevel = true , --// Should a players permission level be saved? GameHistory = true , --// Should a players history be saved? (recommended) ExecutionLog = false , --// Should a players command execution history be saved? },","title":"Data Saving"},{"location":"setup-solar/#permissions","text":"Configuring Permissions for Solar is one of the most important parts of the configuration. In Solar, there are 3 ways you can give a user permissions, UserId & Username Group/Group Rank Asset/Gamepass Solar also has 4 1 permission levels: Permission Level Name Level 1 Player Level 2 Moderator Level 3 Administrator Level 4 Head Administrator When setting a users permission level, you only need to use the number","title":"Permissions"},{"location":"setup-solar/#player-permissions","text":"To give a specific player permissions, paste the code below into the Players table in the Settings.Permissions table [ 00000000 ] = { --// The UserId or Username of the player (UserId is recommended) Level = 4 , --// The permission level of the player }, The Index of this table ( 00000000 ) is the players UserId or Username. You should replace it with your own. The Level value is the permission level, you can set it to any value between 1-4 depending on how much permission you'd like to give the player (scroll up to see each permission level) You can duplicate the code and edit it to add more players.","title":"Player Permissions"},{"location":"setup-solar/#group-permissions","text":"Group Permissions are a bit more advanced than player permissions. Paste the code below into the Groups table in the Permissions table [ 00000000 ] = { --// The Group Id Level = 1 , --// The permission level for the entire group Ranks = { --// The levels for each group rank [ 255 ] = { --// The ID of the group rank Level = 3 , --// The permission level for the role Operator = \"==\" , --// The relational operator for this role (read the docs for more information) }, }, }, The Index of this table ( 00000000 ) is the ID of the group. Inside the table, you can set a permission level for the whole group by changing the Level value to the permission level you'd like You can also give certain ranks a permission level so all players who have that rank will get the permission level To do this, edit or duplicate the 1st table in the Ranks table [ 255 ] = { --// The ID of the group rank Level = 3 , --// The permission level for the role Operator = \"==\" , --// The relational operator for this role (read the docs for more information) }, Set the Index of the table to the rank number of your role Next, set the Level value to the permission level you'd like the role to receive And after that, you can change the Operator value to one of the values below depending on how you'd like it to work Operator Action == Gives members of this role the permission level >= Gives members of this role and members above this role the permisson level <= Gives members of this role and members below this role the permission level ~= Gives anyone who is not a member of this role the permission level > Gives members above this role the permission level < Gives members below this role the permission level You can repeat this process for the ranks you'd like to give permission levels to!","title":"Group Permissions"},{"location":"setup-solar/#asset-permissions","text":"Asset permissions are useful if you have gamepasses to give permission levels. Paste the code below into the Assets table in the Permissions table [ 00000000 ] = { --// The asset's ID Level = 3 , --// The permission level for the players who own the asset Type = \"gamepass\" , --// The value type (if you entered a gamepass's ID, type 'gamepass', otherwise type 'asset') }, Set the Index ( 00000000 ) of the table to your gamepass or asset ID Next, you can set the permission level you'd like owners of this asset to receive by changing the Level value Finally, you should change the type to either gamepass or asset depending on the type of asset you entered (all assets other than gamepasses = asset )","title":"Asset Permissions"},{"location":"setup-solar/#changing-folder-locations","text":"If you'd like to move where the Commands , Plugins and Themes folders are located, you need to update it within the settings Change the CommandsFolder value to the folder of your commands if you moved the folder Change the PluginsFolder value to the folder of your plugins if you moved the folder Change the ThemesFolder value to the folder of your themes if you moved the folder Additional permission levels can be added if needed \u21a9","title":"Changing Folder Locations"},{"location":"using-themes/","text":"Using Themes If you don't like the default style of Solar or would like to customize the colors to match your game, you can do so with Themes! By default, Solar comes with one theme, which is our default theme. Themes for Solar are located in the Themes folder under Configuration in the Solar folder You can find community made themes in our Discord server or on the Themes page Customizing the Default Theme To customize the default theme, open up the default.theme module in the Themes folder. return { Colors = { Background = Color3 . fromRGB ( 38 , 38 , 38 ), --// Background Color of UI Accent = Color3 . fromRGB ( 25 , 150 , 255 ), --// Accent Color of UI PrimaryText = Color3 . fromRGB ( 240 , 240 , 240 ), --// Primary Text Color SuggestionText = Color3 . fromRGB ( 186 , 186 , 186 ), --// Suggestion Text Color Divider = Color3 . fromRGB ( 93 , 93 , 93 ), }, Options = { Font = Enum . Font . RobotoMono , --// UI Font CornerRadius = UDim . new ( 0 , 8 ), --// Corner Radius of UI BackgroundOpacity = 0.15 , --// Background Opacity of UI } } In the Colors table, you can customize almost all the colors of Solar's UI Below that in the Options table, you can change the font, corner radius and background opacity of Solar's UI You can customize these values to your liking Creating your own theme If you want to keep the default theme & make additional themes, you can duplicate the default theme and then customize the duplicate module! Switching Themes To switch the theme of Solar, open the Settings module and edit the Theme value to the location of your theme","title":"Using Themes"},{"location":"using-themes/#using-themes","text":"If you don't like the default style of Solar or would like to customize the colors to match your game, you can do so with Themes! By default, Solar comes with one theme, which is our default theme. Themes for Solar are located in the Themes folder under Configuration in the Solar folder You can find community made themes in our Discord server or on the Themes page","title":"Using Themes"},{"location":"using-themes/#customizing-the-default-theme","text":"To customize the default theme, open up the default.theme module in the Themes folder. return { Colors = { Background = Color3 . fromRGB ( 38 , 38 , 38 ), --// Background Color of UI Accent = Color3 . fromRGB ( 25 , 150 , 255 ), --// Accent Color of UI PrimaryText = Color3 . fromRGB ( 240 , 240 , 240 ), --// Primary Text Color SuggestionText = Color3 . fromRGB ( 186 , 186 , 186 ), --// Suggestion Text Color Divider = Color3 . fromRGB ( 93 , 93 , 93 ), }, Options = { Font = Enum . Font . RobotoMono , --// UI Font CornerRadius = UDim . new ( 0 , 8 ), --// Corner Radius of UI BackgroundOpacity = 0.15 , --// Background Opacity of UI } } In the Colors table, you can customize almost all the colors of Solar's UI Below that in the Options table, you can change the font, corner radius and background opacity of Solar's UI You can customize these values to your liking","title":"Customizing the Default Theme"},{"location":"using-themes/#creating-your-own-theme","text":"If you want to keep the default theme & make additional themes, you can duplicate the default theme and then customize the duplicate module!","title":"Creating your own theme"},{"location":"using-themes/#switching-themes","text":"To switch the theme of Solar, open the Settings module and edit the Theme value to the location of your theme","title":"Switching Themes"},{"location":"community/commands/","text":"Community Commands Below is a list of community commands & command packs Command Packs Utility Pack by S1mp1eDude Commands : clone, increasestat, message, softkick, forcefield, give Troll Pack by S1mp1eDude Commands : fling, freeze, trip, smite, kill Commands Eval by Exp_Bread SoftKick by S1mp1eDude","title":"Community Commands"},{"location":"community/commands/#community-commands","text":"Below is a list of community commands & command packs","title":"Community Commands"},{"location":"community/commands/#command-packs","text":"Utility Pack by S1mp1eDude Commands : clone, increasestat, message, softkick, forcefield, give Troll Pack by S1mp1eDude Commands : fling, freeze, trip, smite, kill","title":"Command Packs"},{"location":"community/commands/#commands","text":"Eval by Exp_Bread SoftKick by S1mp1eDude","title":"Commands"},{"location":"community/themes/","text":"Community Themes Below is a list of community made themes Currently there are no community made themes :(","title":"Community Themes"},{"location":"community/themes/#community-themes","text":"Below is a list of community made themes Currently there are no community made themes :(","title":"Community Themes"},{"location":"reference/api/","text":"Solar API Variables API._version API . _version : string Latest Version of the Solar API Functions API:RegisterPlayer() API : RegisterPlayer ( Player : Player ) -> RegisteredPlayer Registers a player into the Solar API API:UnregisterPlayer() API : UnregisterPlayer ( Player : Player ) -> boolean Unregisters a player from the Solar API API:GetPlayers() API : GetPlayers () -> {[ number ]: RegisteredPlayer ? } Returns table of all registered players API:GetPlayer() API : GetPlayer ( Player : Player | string ) -> RegisteredPlayer | nil Returns a RegisterPlayer API:AddHook() API : AddHook ( Name : string , Folder : Folder ) -> BindableEvent Creates a BindableEvent in the specified folder API:AddEvent() API : AddEvent ( Name : string , Folder : Folder ) -> RemoteEvent Creates a RemoteEvent in the specified folder API:CreateReturnObject() API : CreateReturnObject ( Success : boolean ,... : string ) -> ReturnObject Creates a ReturnObject using the entered arguments API.CreateCommand() API . CreateCommand () -> CommandObject Creates new CommandObject API:GetCommands() API : GetCommands () -> {[ number ]: CommandObject ? } Returns all registered commands API:GetCommand() API : GetCommand ( command : string ) -> CommandObject Returns the CommandObject of the command API:ExecuteCommand() API : ExecuteCommand ( Player : Player , Command : string , Arguments : { any }) -> ReturnObject | boolean Executes the command API:Initialize() API : Initialize ( RegisterCommandsByDefault : boolean , SettingsModule : ModuleScript ? ) -> void Initializes Solar & registers commands","title":"Solar API"},{"location":"reference/api/#solar-api","text":"","title":"Solar API"},{"location":"reference/api/#variables","text":"","title":"Variables"},{"location":"reference/api/#api_version","text":"API . _version : string Latest Version of the Solar API","title":"API._version"},{"location":"reference/api/#functions","text":"","title":"Functions"},{"location":"reference/api/#apiregisterplayer","text":"API : RegisterPlayer ( Player : Player ) -> RegisteredPlayer Registers a player into the Solar API","title":"API:RegisterPlayer()"},{"location":"reference/api/#apiunregisterplayer","text":"API : UnregisterPlayer ( Player : Player ) -> boolean Unregisters a player from the Solar API","title":"API:UnregisterPlayer()"},{"location":"reference/api/#apigetplayers","text":"API : GetPlayers () -> {[ number ]: RegisteredPlayer ? } Returns table of all registered players","title":"API:GetPlayers()"},{"location":"reference/api/#apigetplayer","text":"API : GetPlayer ( Player : Player | string ) -> RegisteredPlayer | nil Returns a RegisterPlayer","title":"API:GetPlayer()"},{"location":"reference/api/#apiaddhook","text":"API : AddHook ( Name : string , Folder : Folder ) -> BindableEvent Creates a BindableEvent in the specified folder","title":"API:AddHook()"},{"location":"reference/api/#apiaddevent","text":"API : AddEvent ( Name : string , Folder : Folder ) -> RemoteEvent Creates a RemoteEvent in the specified folder","title":"API:AddEvent()"},{"location":"reference/api/#apicreatereturnobject","text":"API : CreateReturnObject ( Success : boolean ,... : string ) -> ReturnObject Creates a ReturnObject using the entered arguments","title":"API:CreateReturnObject()"},{"location":"reference/api/#apicreatecommand","text":"API . CreateCommand () -> CommandObject Creates new CommandObject","title":"API.CreateCommand()"},{"location":"reference/api/#apigetcommands","text":"API : GetCommands () -> {[ number ]: CommandObject ? } Returns all registered commands","title":"API:GetCommands()"},{"location":"reference/api/#apigetcommand","text":"API : GetCommand ( command : string ) -> CommandObject Returns the CommandObject of the command","title":"API:GetCommand()"},{"location":"reference/api/#apiexecutecommand","text":"API : ExecuteCommand ( Player : Player , Command : string , Arguments : { any }) -> ReturnObject | boolean Executes the command","title":"API:ExecuteCommand()"},{"location":"reference/api/#apiinitialize","text":"API : Initialize ( RegisterCommandsByDefault : boolean , SettingsModule : ModuleScript ? ) -> void Initializes Solar & registers commands","title":"API:Initialize()"},{"location":"reference/command-object/","text":"CommandObject Variables CommandObject.Name CommandObject . Name : string Name of the command CommandObject.Description CommandObject . Description : string Description of the command CommandObject.PermissionLevel CommandObject . PermissionLevel : number Permission level of the command CommandObject.Arguments CommandObject . Arguments : {} Table of command arguments CommandObject.Options CommandObject . Options : {} Options of the command CommandObject.Metadata CommandObject . Metadata : {} Metadata of the command CommandObject.Functions CommandObject . Functions : {} Command functions CommandObject.Hooks CommandObject . Hooks : {} Command hooks Functions CommandObject:SetName() CommandObject : SetName ( Name : string ) -> CommandObject Sets the name of the CommandObject CommandObject:SetDescription() CommandObject : SetDescription ( Description : string ) -> CommandObject Sets the description of the CommandObject CommandObject:SetPermissionLevel() CommandObject : SetPermissionLevel ( PermissionLevel : number ) -> CommandObject Sets the permission level of the CommandObject CommandObject:SetOptions() CommandObject : SetOptions ( Options : {}) -> CommandObject Sets the options of the CommandObject CommandObject:SetMetadata() CommandObject : SetMetadata ( Metadata : {}) -> CommandObject Sets the metadata of the CommandObject CommandObject:SetExecuteFunction() CommandObject : SetExecuteFunction ( Callback : ( Player : Player ,... any ) -> ReturnObject ? ) -> CommandObject Sets the execute callback of the CommandObject CommandObject:SetHook() CommandObject : SetHook ( HookName : string , callback : (... any ) -> any ) -> CommandObject Sets the specific hook to the callback","title":"CommandObject"},{"location":"reference/command-object/#commandobject","text":"","title":"CommandObject"},{"location":"reference/command-object/#variables","text":"","title":"Variables"},{"location":"reference/command-object/#commandobjectname","text":"CommandObject . Name : string Name of the command","title":"CommandObject.Name"},{"location":"reference/command-object/#commandobjectdescription","text":"CommandObject . Description : string Description of the command","title":"CommandObject.Description"},{"location":"reference/command-object/#commandobjectpermissionlevel","text":"CommandObject . PermissionLevel : number Permission level of the command","title":"CommandObject.PermissionLevel"},{"location":"reference/command-object/#commandobjectarguments","text":"CommandObject . Arguments : {} Table of command arguments","title":"CommandObject.Arguments"},{"location":"reference/command-object/#commandobjectoptions","text":"CommandObject . Options : {} Options of the command","title":"CommandObject.Options"},{"location":"reference/command-object/#commandobjectmetadata","text":"CommandObject . Metadata : {} Metadata of the command","title":"CommandObject.Metadata"},{"location":"reference/command-object/#commandobjectfunctions","text":"CommandObject . Functions : {} Command functions","title":"CommandObject.Functions"},{"location":"reference/command-object/#commandobjecthooks","text":"CommandObject . Hooks : {} Command hooks","title":"CommandObject.Hooks"},{"location":"reference/command-object/#functions","text":"","title":"Functions"},{"location":"reference/command-object/#commandobjectsetname","text":"CommandObject : SetName ( Name : string ) -> CommandObject Sets the name of the CommandObject","title":"CommandObject:SetName()"},{"location":"reference/command-object/#commandobjectsetdescription","text":"CommandObject : SetDescription ( Description : string ) -> CommandObject Sets the description of the CommandObject","title":"CommandObject:SetDescription()"},{"location":"reference/command-object/#commandobjectsetpermissionlevel","text":"CommandObject : SetPermissionLevel ( PermissionLevel : number ) -> CommandObject Sets the permission level of the CommandObject","title":"CommandObject:SetPermissionLevel()"},{"location":"reference/command-object/#commandobjectsetoptions","text":"CommandObject : SetOptions ( Options : {}) -> CommandObject Sets the options of the CommandObject","title":"CommandObject:SetOptions()"},{"location":"reference/command-object/#commandobjectsetmetadata","text":"CommandObject : SetMetadata ( Metadata : {}) -> CommandObject Sets the metadata of the CommandObject","title":"CommandObject:SetMetadata()"},{"location":"reference/command-object/#commandobjectsetexecutefunction","text":"CommandObject : SetExecuteFunction ( Callback : ( Player : Player ,... any ) -> ReturnObject ? ) -> CommandObject Sets the execute callback of the CommandObject","title":"CommandObject:SetExecuteFunction()"},{"location":"reference/command-object/#commandobjectsethook","text":"CommandObject : SetHook ( HookName : string , callback : (... any ) -> any ) -> CommandObject Sets the specific hook to the callback","title":"CommandObject:SetHook()"},{"location":"reference/registered-player/","text":"RegisteredPlayer Variables RegisteredPlayer.AccountAge RegisteredPlayer . AccountAge : number Account age of the RegisterPlayer RegisteredPlayer.DisplayName RegisteredPlayer . DisplayName : string Display name of the RegisterPlayer RegisteredPlayer.Username RegisteredPlayer . Username : string Username of the RegisterPlayer RegisteredPlayer.UserId RegisteredPlayer . UserId : number UserId of the RegisterPlayer RegisteredPlayer.PermissionLevel RegisteredPlayer . PermissionLevel : number Permission level of the RegisterPlayer RegisteredPlayer.Region RegisteredPlayer . Region : string Region of the RegisterPlayer RegisteredPlayer.PolicyInfo RegisteredPlayer . PolicyInfo : {} Policy information of the RegisterPlayer RegisteredPlayer.JoinTime RegisteredPlayer . JoinTime : number Join time of the RegisterPlayer RegisteredPlayer.Player RegisteredPlayer . Player : Player Player instance of the RegisterPlayer RegisteredPlayer.ExecutionLog RegisteredPlayer . ExecutionLog : {} Execution log of the RegisterPlayer RegisteredPlayer.GameHistory RegisteredPlayer . GameHistory : {} Game history of the RegisterPlayer Functions RegisteredPlayer:SetPermission() RegisteredPlayer : SetPermission ( PermissionLevel : number | nil ) -> RegisterPlayer . PermissionLevel Sets the RegisteredPlayer permission level RegisteredPlayer:LogExecution() RegisteredPlayer : LogExecution ( command : string , arguments : {} ? , response : any ) -> RegisterPlayer Logs command execution for the RegisteredPlayer RegisteredPlayer:LogHistory() RegisteredPlayer : LogHistory ( player : Player , history : { any } ? ) -> RegisterPlayer Logs game history for the RegisteredPlayer","title":"RegisteredPlayer"},{"location":"reference/registered-player/#registeredplayer","text":"","title":"RegisteredPlayer"},{"location":"reference/registered-player/#variables","text":"","title":"Variables"},{"location":"reference/registered-player/#registeredplayeraccountage","text":"RegisteredPlayer . AccountAge : number Account age of the RegisterPlayer","title":"RegisteredPlayer.AccountAge"},{"location":"reference/registered-player/#registeredplayerdisplayname","text":"RegisteredPlayer . DisplayName : string Display name of the RegisterPlayer","title":"RegisteredPlayer.DisplayName"},{"location":"reference/registered-player/#registeredplayerusername","text":"RegisteredPlayer . Username : string Username of the RegisterPlayer","title":"RegisteredPlayer.Username"},{"location":"reference/registered-player/#registeredplayeruserid","text":"RegisteredPlayer . UserId : number UserId of the RegisterPlayer","title":"RegisteredPlayer.UserId"},{"location":"reference/registered-player/#registeredplayerpermissionlevel","text":"RegisteredPlayer . PermissionLevel : number Permission level of the RegisterPlayer","title":"RegisteredPlayer.PermissionLevel"},{"location":"reference/registered-player/#registeredplayerregion","text":"RegisteredPlayer . Region : string Region of the RegisterPlayer","title":"RegisteredPlayer.Region"},{"location":"reference/registered-player/#registeredplayerpolicyinfo","text":"RegisteredPlayer . PolicyInfo : {} Policy information of the RegisterPlayer","title":"RegisteredPlayer.PolicyInfo"},{"location":"reference/registered-player/#registeredplayerjointime","text":"RegisteredPlayer . JoinTime : number Join time of the RegisterPlayer","title":"RegisteredPlayer.JoinTime"},{"location":"reference/registered-player/#registeredplayerplayer","text":"RegisteredPlayer . Player : Player Player instance of the RegisterPlayer","title":"RegisteredPlayer.Player"},{"location":"reference/registered-player/#registeredplayerexecutionlog","text":"RegisteredPlayer . ExecutionLog : {} Execution log of the RegisterPlayer","title":"RegisteredPlayer.ExecutionLog"},{"location":"reference/registered-player/#registeredplayergamehistory","text":"RegisteredPlayer . GameHistory : {} Game history of the RegisterPlayer","title":"RegisteredPlayer.GameHistory"},{"location":"reference/registered-player/#functions","text":"","title":"Functions"},{"location":"reference/registered-player/#registeredplayersetpermission","text":"RegisteredPlayer : SetPermission ( PermissionLevel : number | nil ) -> RegisterPlayer . PermissionLevel Sets the RegisteredPlayer permission level","title":"RegisteredPlayer:SetPermission()"},{"location":"reference/registered-player/#registeredplayerlogexecution","text":"RegisteredPlayer : LogExecution ( command : string , arguments : {} ? , response : any ) -> RegisterPlayer Logs command execution for the RegisteredPlayer","title":"RegisteredPlayer:LogExecution()"},{"location":"reference/registered-player/#registeredplayerloghistory","text":"RegisteredPlayer : LogHistory ( player : Player , history : { any } ? ) -> RegisterPlayer Logs game history for the RegisteredPlayer","title":"RegisteredPlayer:LogHistory()"}]}